<div class="row">
    <div class="col-2 px-1">
        <input class="form-control" list="b53_<%= symbol.id %>_spot_list" id="b53_<%= symbol.id %>_spotName" placeholder="Spot pair" value="<%= symbol.pairname %>">
        <datalist id="b53_<%= symbol.id %>_spot_list">
        </datalist>
    </div>
    <div class="col-1 px-1">
        <input class="form-control" type="text" placeholder="Hours to upload history" id="b53_<%= symbol.id %>_hours" value="<%= symbol.uploadhours %>">
    </div>
    <div class="col-1 px-1">
        <input class="form-control" type="text" placeholder="Hours SPOT to upload history" id="b53_<%= symbol.id %>_hours2" value="<%= symbol.pair_uploadhours %>">
    </div>
    <div class="col-1 px-1">
        <button class="btn btn-secondary btn-sm col-12 .b53symbolupdate" id="b53_<%= symbol.id %>_update">ðŸ’¾</button>
    </div>
</div>
<div class="row mt-1">
    <div class="col-4">
        <div class="row">
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="14400000">4h</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="3600000">1h</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="1800000">30m</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="900000">15m</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="300000">5m</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="60000">1m</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="30000">30s</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="10000">10s</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="5000">5s</button>
            </div>
            <div class="col-1 px-1">
                <button class="btn btn-secondary btn-sm col-12 b53timechange<%= symbol.id %> px-1" data-value="1000">1s</button>
            </div>
        </div>
    </div>
</div>
<div class="row mt-2" id="b53_<%= symbol.id %>_time" data-value="300000">
    <div class="col-11 px-1">
        <div id="penisholder_<%= symbol.id %>"></div>
    </div>
</div>
<script lang="js">
    "<%= symbol.id %>";
var megaChart<%= symbol.id %> = {
    id:"<%= symbol.id %>",
    chart:null,
    series:[],
    rclick:false,
    buildChart: ()=>{
            megaChart<%= symbol.id %>.chart = LightweightCharts.createChart(document.getElementById("penisholder_<%= symbol.id %>"), {
            width: 1200,
            height: 600,
            layout: {
                backgroundColor: '#171B26',
                textColor: 'rgba(255, 255, 255, 0.9)',
            },
            grid: {
                vertLines: {
                    color: '#334158',
                },
                horzLines: {
                    color: '#334158',
                },
            },
            crosshair: {
                mode: LightweightCharts.CrosshairMode.Normal,
            },
            rightPriceScale: {
                borderColor: '#485c7b',
            },
            timeScale: {
                borderColor: '#485c7b',
                timeVisible : true,
                secondsVisible: true
            },
            watermark: {
                text: "<%= symbol.symbol %>",
                fontSize: 128,
                color: "rgba(256, 256, 256, 0.05)",
                visible: true
            }
        });

        //build main candles
        megaChart<%= symbol.id %>.buildCanldleSeria({
                upColor: '#26A69A',
                downColor: '#EF5350',
                borderDownColor: '#EF5350',
                borderUpColor: '#26A69A',
                wickDownColor: '#EF5350',
                wickUpColor: '#26A69A',
                priceFormat: {
                    type: 'price',
                    minMove: parseFloat("<%= symbol.mintick %>").toFixed(<%= symbol.tickprecision %>+1)
                }
            },
            (can)=>{
                fetch(`/candles?time=${$("#b53_<%= symbol.id %>_time").attr("data-value")}&symbolid=<%= symbol.id %>`)
                    .then(res=>res.json())
                    .then(j=>{
                        can.setData(j);
                    });
            },
            (can)=>{
                //get latest candle and update
                let tima = $("#b53_<%= symbol.id %>_time").attr("data-value");
                if(!tima) return;
                fetch(`/lastcandle?time=${tima}&symbolid=<%= symbol.id %>`)
                .then(res=>res.json())
                .then(j=>{
                    can.update(j);
                });
            }
        );

        //build volume
        megaChart<%= symbol.id %>.buildHistSeria(
            {
                color: "rgba(107, 255, 193, 0.5)",
                lineWidth: 2,
                priceFormat: {
                    type: "volume"
                },
                overlay: true,
                scaleMargins: {
                    top: 0.8,
                    bottom: 0
                }
            },
            (can)=>{
                fetch(`/indicator?time=${$("#b53_<%= symbol.id %>_time").attr("data-value")}&symbolid=<%= symbol.id %>&type=volume`)
                    .then(res=>res.json())
                    .then(j=>{
                        can.setData(j);
                    });
            },
            (can)=>{
                /*
                let tima = $("#b53_<%= symbol.id %>_time").attr("data-value");
                if(!tima) return;
                fetch(`/lastcandle?time=${tima}&symbolid=<%= symbol.id %>`)
                    .then(res=>res.json())
                    .then(j=>{
                        can.update(j);
                });
                */
            }
        );

        //build sell volume
        megaChart<%= symbol.id %>.buildHistSeria(
            {
                color: "rgba(255, 128, 159, 0.5)",
                lineWidth: 2,
                priceFormat: {
                    type: "volume"
                },
                overlay: true,
                scaleMargins: {
                    top: 0.8,
                    bottom: 0
                }
            },
            (can)=>{
                fetch(`/indicator?time=${$("#b53_<%= symbol.id %>_time").attr("data-value")}&symbolid=<%= symbol.id %>&type=sellvolume`)
                    .then(res=>res.json())
                    .then(j=>{
                        can.setData(j);
                    });
            },
            (can)=>{
                /*
                let tima = $("#b53_<%= symbol.id %>_time").attr("data-value");
                if(!tima) return;
                fetch(`/lastcandle?time=${tima}&symbolid=<%= symbol.id %>`)
                    .then(res=>res.json())
                    .then(j=>{
                        can.update(j);
                });
                */
            }
        );
    },
    buildCanldleSeria: (seria,funcToData,funcToRenew)=>{
        let chartSeria = megaChart<%= symbol.id %>.chart.addCandlestickSeries(seria);
        let newseria = {
            seria:chartSeria,
            setdata: ()=> {funcToData(chartSeria);},
            newdata: ()=> {funcToRenew(chartSeria);}
        };
        megaChart<%= symbol.id %>.series.push(newseria);
    },
    buildHistSeria: (seria,funcToData,funcToRenew)=>{
        let chartSeria = megaChart<%= symbol.id %>.chart.addHistogramSeries(seria);
        let newseria = {
            seria:chartSeria,
            setdata: ()=> {funcToData(chartSeria);},
            newdata: ()=> {funcToRenew(chartSeria);}
        };
        megaChart<%= symbol.id %>.series.push(newseria);
    }
};


$(()=>{
    megaChart<%= symbol.id %>.buildChart();

    $("#b53_<%= symbol.id %>_update").on("mouseup",(e)=>{
        //save changes
        let spotid = $(`#b53_<%= symbol.id %>_spot_list option[value='${$("#b53_<%= symbol.id %>_spotName").val()}']`).attr('data-value');
        let hrs = $('#b53_<%= symbol.id %>_hours').val();
        let hrs2 = $('#b53_<%= symbol.id %>_hours2').val();
        fetch("/update?table=dbo.b53symbols&id=<%= symbol.id %>",{method:'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                body:JSON.stringify([
                    {name:"pair",value:spotid},
                    {name:"uploadhours",value:hrs},
                    {name:"pair_uploadhours",value:hrs2},
                ])}).then(()=>{
                    //close done
                    
            }).catch((er) => {
                console.warn(er);
            });
    });
    
    $(".b53timechange<%= symbol.id %>").on("mouseup",(e)=>{
        $("#b53_<%= symbol.id %>_time").attr("data-value",$(e.target).attr("data-value"));
        
        megaChart<%= symbol.id %>.series.forEach(s=>{
            s.setdata();
        });
    });
    //add options
    
    fetch("/html_options?type=symbols&isfutures=false&unmain=true&market=<%= symbol.marketname %>")
            .then((r) => r.json())
            .then((h) => {
                $("#b53_<%= symbol.id %>_spot_list").html(
                    h.map(e=>`<option data-value='${e.value}' value='${e.name}'>`).join('')
                );
            })
            .catch((er) => {
                console.warn(er);
            });

    setInterval(()=>{
        megaChart<%= symbol.id %>.series.forEach(s=>{
            s.newdata();
        });
    },500);

    megaChart<%= symbol.id %>.series.forEach(s=>{
            s.setdata();
        });
    
    //"penisholder_<%= symbol.id %>"
    $("#penisholder_<%= symbol.id %>").find("canvas").on("contextmenu",(e)=>{return false;});
    $("#penisholder_<%= symbol.id %>").find("canvas").on("mousedown",(e)=>{
        if(e.which==3)
        {
            //start dragging
            console.log("start left drag");
            megaChart<%= symbol.id %>.rclick = true;
        }
        
    });
    $("#penisholder_<%= symbol.id %>").find("canvas").on("mouseup",(e)=>{
        if(e.which==3)
        {
            //start dragging
            console.log("stop left drag");
            megaChart<%= symbol.id %>.rclick = false;
        }
        
    });
    megaChart<%= symbol.id %>.chart.subscribeCrosshairMove((p)=>{
        if(!p.point||!megaChart<%= symbol.id %>.rclick) return;
        console.log(megaChart<%= symbol.id %>.chart.TM.Da.gi.Da.Qo.h[0].l.Q_.h[0].l.TM.gi.ct.Ai);
    });
    //$('body').on('contextmenu', '#myCanvas', function(e){ return false; });
    //var megaPr = megaChart141.series[0].seria.createPriceLine({
    //    price:1.98
    //});
    // megaPr.Lr.uh.ni.ii
    //megaChart141.chart.TM.Da.gi.Da.Qo.h[0].l.Q_.h[0].l.TM.gi.ct
})
</script>